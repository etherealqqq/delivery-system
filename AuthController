package com.delivery.delivery_system.controller;

import com.delivery.delivery_system.dto.UserRegistrationDto;
import com.delivery.delivery_system.model.User;
import com.delivery.delivery_system.repository.UserRepository;
import jakarta.validation.Valid;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import java.util.Set;

@Controller
public class AuthController {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public AuthController(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("user", new UserRegistrationDto()); // Передаём пустой DTO в форму
        return "register";
    }

    @PostMapping("/register")
    public String registerUser(@Valid UserRegistrationDto userDto,
                               BindingResult result,
                               Model model) {

        // Проверка на ошибки валидации
        if (result.hasErrors()) {
            return "register"; // Возвращаем на форму с сообщениями об ошибках
        }

        // Проверка на существующего пользователя
        if (userRepository.findByUsername(userDto.getUsername()).isPresent()) {
            model.addAttribute("error", "Имя пользователя уже занято");
            return "register";
        }

        // Создание нового пользователя
        User user = new User();
        user.setUsername(userDto.getUsername());
        user.setPassword(passwordEncoder.encode(userDto.getPassword()));
        user.setRoles(Set.of("USER"));

        userRepository.save(user);

        return "redirect:/login?registered"; // Перенаправляем после успешной регистрации
    }
}
