package com.delivery.delivery_system.controller;

import com.delivery.delivery_system.exception.ConflictException;
import com.delivery.delivery_system.exception.EntityNotFoundException;
import com.delivery.delivery_system.model.Customer;
import com.delivery.delivery_system.repository.CustomerRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.time.LocalDateTime;
import java.util.List;

@RestController
@RequestMapping("/api/customers")
@RequiredArgsConstructor
public class CustomerController {
    private final CustomerRepository customerRepository;

    @GetMapping
    public ResponseEntity<List<Customer>> getAllCustomers() {
        return ResponseEntity.ok(customerRepository.findAll());
    }

    @PostMapping
    public ResponseEntity<Customer> createCustomer(@Valid @RequestBody Customer customer) {
        if (customerRepository.existsByEmail(customer.getEmail())) {
            throw new ConflictException("Email already in use");
        }
        if (customerRepository.existsByPhone(customer.getPhone())) {
            throw new ConflictException("Phone already in use");
        }
        customer.setCreatedAt(LocalDateTime.now());
        return ResponseEntity.status(HttpStatus.CREATED)
                .body(customerRepository.save(customer));
    }

    @GetMapping("/{id}")
    public ResponseEntity<Customer> getCustomer(@PathVariable Long id) {
        return ResponseEntity.ok(customerRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Customer not found")));
    }

    @PutMapping("/{id}")
    public ResponseEntity<Customer> updateCustomer(
            @PathVariable Long id,
            @Valid @RequestBody Customer customerDetails) {
        Customer customer = customerRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Customer not found"));

        if (!customer.getEmail().equals(customerDetails.getEmail())
                && customerRepository.existsByEmail(customerDetails.getEmail())) {
            throw new ConflictException("Email already in use");
        }
        if (!customer.getPhone().equals(customerDetails.getPhone())
                && customerRepository.existsByPhone(customerDetails.getPhone())) {
            throw new ConflictException("Phone already in use");
        }

        customer.setFirstName(customerDetails.getFirstName());
        customer.setLastName(customerDetails.getLastName());
        customer.setPhone(customerDetails.getPhone());
        customer.setEmail(customerDetails.getEmail());

        return ResponseEntity.ok(customerRepository.save(customer));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCustomer(@PathVariable Long id) {
        customerRepository.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}
